name: Rust

on:
  push:
    branches: [main, release/**]
  pull_request:

concurrency:
  group:
    ${{ github.workflow }}-${{ github.ref_protected == 'true' && github.sha ||
    github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  debug-context:
    runs-on: ubuntu-latest
    steps:
      - name: Debug GitHub context
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Head ref: ${{ github.head_ref }}"
          echo "Base ref: ${{ github.base_ref }}"
          echo "Condition result: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/') || startsWith(github.head_ref, 'release/') }}"

  complete:
    if: always()
    needs:
      [
        cargo-deny,
        check,
        build-and-test,
        build-and-test-macos,
        build-and-test-windows,
        disallow-git-deps,
        publish-dry-run,
      ]
    runs-on: ubuntu-latest
    steps:
      - if: contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')
        run: exit 1

  cargo-deny:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        check: [advisories, bans, licenses, sources]
    continue-on-error: ${{ matrix.check == 'advisories' }}
    steps:
      - uses: actions/checkout@v5
      - uses: EmbarkStudios/cargo-deny-action@f2ba7abc2abebaf185c833c3961145a3c275caad
        with:
          command: check ${{ matrix.check }}

  check:
    runs-on: ubuntu-latest-8-cores
    steps:
      - uses: actions/checkout@v5
      - uses: stellar/actions/rust-cache@main
      - run: sudo apt update && sudo apt install -y libudev-dev libdbus-1-dev
      - run: rustup update
      - run: npm install
      - run: make check

  build-and-test:
    strategy:
      fail-fast: false
      matrix:
        rust: [msrv, latest]
        sys:
          - os: ubuntu-latest-8-cores
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-jammy-8-cores-arm64
            target: aarch64-unknown-linux-gnu
    runs-on: ${{ matrix.sys.os }}
    steps:
      - uses: actions/checkout@v5
      - uses: ./.github/actions/build-and-test
        with:
          target: ${{ matrix.sys.target }}
          rust-version: ${{ matrix.rust }}

  build-and-test-macos:
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/') || startsWith(github.head_ref, 'release/')
    strategy:
      fail-fast: false
      matrix:
        rust: [msrv, latest]
        sys:
          - os: macos-13
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
    runs-on: ${{ matrix.sys.os }}
    steps:
      - uses: actions/checkout@v5
      - uses: ./.github/actions/build-and-test
        with:
          target: ${{ matrix.sys.target }}
          rust-version: ${{ matrix.rust }}

  build-and-test-windows:
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/') || startsWith(github.head_ref, 'release/')
    strategy:
      fail-fast: false
      matrix:
        rust: [msrv, latest]
        sys:
          - os: windows-latest-8-cores
            target: x86_64-pc-windows-msvc
    runs-on: ${{ matrix.sys.os }}
    steps:
      - uses: actions/checkout@v5
      - uses: ./.github/actions/build-and-test
        with:
          target: ${{ matrix.sys.target }}
          rust-version: ${{ matrix.rust }}

  disallow-git-deps:
    # This job fails if a release is being prepared and there are still crate
    # dependencies in the Cargo.toml files that reference dependencies via git.
    # Git dependencies should not be set when releasing because the binary
    # builds that happen based on the local source, and the published crate,
    # may not build to be the same. This is because when the crate is published
    # the git dependencies are stripped out automatically, but when building
    # locally they'd still be present. The presence of git dependencies at
    # release time in any case is probably a bug.
    if: github.event_name == 'push' || startsWith(github.head_ref, 'release/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Check that Cargo.tomls do not contain git dependencies for release
        run: |
          ! git --no-pager grep 'git\s*=' -- Cargo.toml **/Cargo.toml

  publish-dry-run:
    if: github.event_name == 'push' || startsWith(github.head_ref, 'release/')
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest-8-cores
            target: x86_64-unknown-linux-gnu
            cargo-hack-feature-options:
              --feature-powerset --skip emulator-tests
            additional-deb-packages: libudev-dev libdbus-1-dev
          #        - os: ubuntu-jammy-8-cores-arm64
          #          target: aarch64-unknown-linux-gnu
          #          cargo-hack-feature-options: --feature-powerset --skip emulator-tests default
          #          additional-deb-packages: libudev-dev libssl-dev libdbus-1-dev
          - os: macos-13
            target: x86_64-apple-darwin
            cargo-hack-feature-options:
              --feature-powerset --skip emulator-tests
          - os: macos-latest
            target: aarch64-apple-darwin
            cargo-hack-feature-options:
              --feature-powerset --skip emulator-tests
          # Windows builds notes:
          #
          # The different features that need testing are split over unique
          # isolated builds for Windows, because there's a bug in Cargo [1] that
          # causes builds of wasm-opt [2] to fail when run one after the other and
          # attempting to clean up artifacts in between. The bug has been fixed,
          # but will not make it into a stable release of Cargo until ~August
          # 2023.
          #
          # [1]: https://github.com/rust-lang/cargo/pull/11442
          # [2]: https://github.com/brson/wasm-opt-rs/issues/116
          - os: windows-latest-8-cores
            target: x86_64-pc-windows-msvc
            cargo-hack-feature-options: ""
            cargo-hack-package-options: --no-default-features
          - os: windows-latest-8-cores
            target: x86_64-pc-windows-msvc
            cargo-hack-feature-options:
              --features additional-libs --ignore-unknown-features

    uses: stellar/actions/.github/workflows/rust-publish-dry-run-v2.yml@main
    with:
      runs-on: ${{ matrix.os }}
      target: ${{ matrix.target }}
      cargo-hack-feature-options: ${{ matrix.cargo-hack-feature-options }}
      additional-deb-packages: ${{ matrix.additional-deb-packages }}
